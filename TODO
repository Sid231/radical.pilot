
  + fix invokation frequency of idle callbacks
  + clean pilot cancelation
  + client agent startup
  + exec worker/watcher concurrency
  + lrms/scheduler dependency
  + profile names
  + log file name uniquenenss
  + state history (update ordering)
    + multiple updater instances will compete for state updates and push them
      out of order, thus screwing with the CU states which end up in the DB.\
    + limit to one update instance
  + pilot updates via updater (different pubsub channel)
  + make sure finalize is called on terminate (via atexit?)
  + make sure all profile entries exist, merge from module profiling branch
  + merge from devel
  + merge from osgng
  + forward tunnel endpoint from bootstrap_1 to agent
  + make sure opaque_slot is a dict
  + make sure that the lrms_config_hook is called only once
    (this is implicit now, as we only have one scheduler instance, and thus
    only one (set of) LRMS instances)
  - At this point it might be simpler to have one LRMS instance which handles
    MPI and non-MPI?  Not sure about the diversity of combinations which need
    supporting...
  = component failures need to propagate to the agent to trigger shutdown
  = torus scheduler is broken in the split arch
  - advance() implicitly publishes unit state, but the publisher needs to be
    declared explicitly.
  + rename 'worker' to 'sub-agent' to avoid confusion?
  + component: collapse declare_input and declare_worker
  + cu['_id'] -> cu['uid'] etc

  - state pubsub now has [cmd, ttype, thing] tuples fed from advance.
  + self.advance(cu, FAILED, ...) will not find a suitable output channel.
    Handle gracefully!  
  - Always push final things fully to DB!
  - we mostly don't need create() methods -- in many cases we can just use
    constructors.
  + default output staging component: __init__ calls Component __init__, but
    should call base __init__, which then calls Component __init__
    Same holds for other component implementations.
  - The component base.create calls should pick up all component implmentations
    automatically, instead of having a static type map
  - Bridges should be created by session, both on client and on agent side.
    The bridge addresses should get stored in DB, and  retrieved from DB on session
    reconnect (if not available otherwise: not all nodes will be able to connect
               to the DB).
  - on the component, add 'declare_thread' for actions which are needed more
    frequent than idle callbacks, and also need some guarantees on the
    frequency.  Prominent example: execution watcher threads.  Handle the
    'work()' loop as just one of those threads (the default one).
  - component watcher needs to clean out component threads even for failed
    components
  - shutdown command propagation is broken


